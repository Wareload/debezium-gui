services:
  kafka:
    image: bitnami/kafka:3.4
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_KRAFT_CLUSTER_ID: q0k00yjQRaqWmAAAZv955w
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: INTERNAL://kafka:29092,CONTROLLER://kafka:29093,EXTERNAL://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  debezium-connect:
    image: debezium/connect:2.5
    pull_policy: always
    restart: on-failure:3
    depends_on:
      - kafka
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: configs
      OFFSET_STORAGE_TOPIC: offsets
      STATUS_STORAGE_TOPIC: status
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
      REST_HOST_NAME: 0.0.0.0
  postgres:
    image: postgres:latest
    restart: on-failure:3
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    command: [ "postgres", "-c", "wal_level=logical" ]
    ports:
      - "5432:5432"
  debezium-gui:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3001:3000'
    environment:
      DEBEZIUM_URL: http://debezium-connect:8083